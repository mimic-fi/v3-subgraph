type Environment @entity {
  id: ID!
  creator: String!
  namespace: String!
  authorizers: [Authorizer!] @derivedFrom(field: "environment")
  priceOracles: [PriceOracle!] @derivedFrom(field: "environment")
  smartVaults: [SmartVault!] @derivedFrom(field: "environment")
  tasks: [Task!] @derivedFrom(field: "environment")
}

type SmartVault @entity {
  id: ID!
  name: String!
  registry: String!
  implementation: Implementation!
  environment: Environment!
  authorizer: Authorizer!
  priceOracle: PriceOracle!
}

type Authorizer @entity {
  id: ID!
  name: String!
  implementation: Implementation!
  environment: Environment!
  permissions: [Permission!] @derivedFrom(field: "authorizer")
}

type Permission @entity {
  id: ID!
  authorizer: Authorizer!
  who: String!
  where: String!
  what: String!
  params: [PermissionParam!] @derivedFrom(field: "permission")
}

type PermissionParam @entity {
  id: ID!
  permission: Permission!
  op: String!
  value: String!
}

type PriceOracle @entity {
  id: ID!
  name: String!
  implementation: Implementation!
  environment: Environment!
  feeds: [PriceOracleFeed!] @derivedFrom(field: "priceOracle")
  signers: [PriceOracleSigner!] @derivedFrom(field: "priceOracle")
}

type PriceOracleSigner @entity {
  id: ID!
  priceOracle: PriceOracle!
  signer: String!
}

type PriceOracleFeed @entity {
  id: ID!
  priceOracle: PriceOracle!
  base: ERC20!
  quote: ERC20!
  feed: String!
}

type Task @entity {
  id: ID!
  name: String!
  implementation: Implementation!
  environment: Environment!
  smartVault: SmartVault!
}

type Implementation @entity {
  id: ID!
  name: String!
  stateless: Boolean!
  deprecated: Boolean!
}

type ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}
