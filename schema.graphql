type Environment @entity {
  id: ID!
  creator: String!
  namespace: String!
  network: String!
  authorizers: [Authorizer!] @derivedFrom(field: "environment")
  priceOracles: [PriceOracle!] @derivedFrom(field: "environment")
  smartVaults: [SmartVault!] @derivedFrom(field: "environment")
  tasks: [Task!] @derivedFrom(field: "environment")
  relayedExecutions: [RelayedExecution!] @derivedFrom(field: "environment")
}

type SmartVault @entity {
  id: ID!
  name: String!
  registry: String!
  implementation: Implementation!
  environment: Environment!
  authorizer: Authorizer!
  priceOracle: PriceOracle!
  paused: Boolean!
  tasks: [Task!] @derivedFrom(field: "smartVault")
  movements: [Movement!] @derivedFrom(field: "smartVault")
  transactions: [Transaction!] @derivedFrom(field: "smartVault")
  relayerParams: RelayerParams @derivedFrom(field: "smartVault")
}

type RelayerParams @entity {
  id: ID!
  smartVault: SmartVault!
  balance: BigInt!
  feeCollector: String!
  maxQuota: BigInt!
  quotaUsed: BigInt!
}

type Authorizer @entity {
  id: ID!
  name: String!
  implementation: Implementation!
  environment: Environment!
  permissions: [Permission!] @derivedFrom(field: "authorizer")
}

type Permission @entity {
  id: ID!
  authorizer: Authorizer!
  who: String!
  where: String!
  what: String!
  params: [PermissionParam!] @derivedFrom(field: "permission")
}

type PermissionParam @entity {
  id: ID!
  permission: Permission!
  op: String!
  value: String!
}

type PriceOracle @entity {
  id: ID!
  name: String!
  implementation: Implementation!
  environment: Environment!
  feeds: [PriceOracleFeed!] @derivedFrom(field: "priceOracle")
  signers: [PriceOracleSigner!] @derivedFrom(field: "priceOracle")
}

type PriceOracleSigner @entity {
  id: ID!
  priceOracle: PriceOracle!
  signer: String!
}

type PriceOracleFeed @entity {
  id: ID!
  priceOracle: PriceOracle!
  base: ERC20!
  quote: ERC20!
  feed: String!
}

type Task @entity {
  id: ID!
  name: String!
  implementation: Implementation!
  environment: Environment!
  smartVault: SmartVault!
  tokensSource: String!
  nextBalanceConnector: String!
  previousBalanceConnector: String!
  executionType: String!
  gasPriceLimit: BigInt!
  priorityFeeLimit: BigInt!
  txCostLimitPct: BigInt!
  txCostLimit: BigInt!
  timeLockDelay: BigInt!
  timeLockExecutionPeriod: BigInt!
  timeLockExpiration: BigInt!
  acceptanceList: AcceptanceList!
  defaultVolumeLimit: VolumeLimit
  defaultTokenThreshold: TokenThreshold
  customVolumeLimit: [CustomVolumeLimit!] @derivedFrom(field: "task")
  customTokenThreshold: [CustomTokenThreshold!] @derivedFrom(field: "task")
  # Specific tasks config
  connector: String
  defaultDestinationChain: BigInt
  defaultMaxSlippage: BigInt
  defaultTokenOut: ERC20
  recipient: String
  customDestinationChain: [CustomDestinationChain!] @derivedFrom(field: "task")
  customTokenOut: [CustomTokenOut!] @derivedFrom(field: "task")
  customMaxSlippage: [CustomMaxSlippage!] @derivedFrom(field: "task")
}

type AcceptanceList @entity {
  id: ID!
  task: Task!
  type: String!
  tokens: [String!]!
}

type VolumeLimit @entity {
  id: ID!
  token: ERC20!
  period: BigInt!
  amount: BigInt!
}

type CustomDestinationChain @entity {
  id: ID!
  task: Task!
  token: ERC20!
  destinationChain: BigInt!
}

type CustomMaxSlippage @entity {
  id: ID!
  task: Task!
  token: ERC20!
  maxSlippage: BigInt!
}

type CustomTokenOut @entity {
  id: ID!
  task: Task!
  token: ERC20!
  tokenOut: ERC20!
}

type TokenThreshold @entity {
  id: ID!
  token: ERC20!
  min: BigInt!
  max: BigInt!
}

type CustomTokenThreshold @entity {
  id: ID!
  task: Task!
  token: ERC20!
  threshold: TokenThreshold!
}

type CustomVolumeLimit @entity {
  id: ID!
  task: Task!
  token: ERC20!
  volumeLimit: VolumeLimit!
}

type Movement @entity {
  id: ID!
  hash: String!
  sender: String!
  executedAt: BigInt!
  token: ERC20!
  amount: BigInt!
  added: Boolean!
  connector: String!
  smartVault: SmartVault!
  relayedExecution: RelayedExecution
}

type Transaction @entity {
  id: ID!
  hash: String!
  sender: String!
  executedAt: BigInt!
  type: TransactionType!
  fee: BigInt!
  smartVault: SmartVault!
  relayedExecution: RelayedExecution
}

enum TransactionType {
  Wrap
  Unwrap
  Collect
  Withdraw
  Call
  Execute
}

type RelayedExecution @entity {
  id: ID!
  hash: String!
  sender: String!
  executedAt: BigInt!
  smartVault: SmartVault!
  environment: Environment!
  task: Task!
  index: BigInt!
  succeeded: Boolean!
  result: Bytes!
  gasUsed: BigInt!
  gasPrice: BigInt!
  costNative: BigInt!
  movements: [Movement!] @derivedFrom(field: "relayedExecution")
  transactions: [Transaction!] @derivedFrom(field: "relayedExecution")
}

type Implementation @entity {
  id: ID!
  name: String!
  stateless: Boolean!
  deprecated: Boolean!
}

type ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}
