import * as fs from 'fs'
import { ethers } from 'ethers'

const FUNCTIONS = {}
const DEPENDENCIES_DIR = './node_modules/@mimic-fi'
const DICTIONARY_OUTPUT = './src/permissions/dictionary.ts'

fs.readdirSync(DEPENDENCIES_DIR).forEach(dependency => {
  const interfacesDir = `${DEPENDENCIES_DIR}/${dependency}/artifacts/contracts/interfaces`
  if (!fs.existsSync(interfacesDir)) return
  fs.readdirSync(interfacesDir).forEach(file => processInterfaces(`${interfacesDir}/${file}`))
})

writeOutput()

function processInterfaces(path: string): void {
  if (fs.statSync(path).isDirectory()) return fs.readdirSync(path).forEach(file => processInterfaces(`${path}/${file}`))

  const data = JSON.parse(fs.readFileSync(path).toString())
  if (!data.abi) return

  const iface = new ethers.utils.Interface(data.abi)
  data.abi
    .filter(input => input.type === 'function')
    .filter(input => input.stateMutability === 'nonpayable')
    .forEach(input => FUNCTIONS[iface.getSighash(input.name)] = input.name)
}

function writeOutput(): void {
  if (fs.existsSync(DICTIONARY_OUTPUT)) fs.unlinkSync(DICTIONARY_OUTPUT)
  const content = `// This file was autogenerated at deployment time
  
export default {
${Object.entries(FUNCTIONS).map(([selector, name]) => `  '${selector}': '${name}',`).join('\n')}
}
`
  fs.writeFileSync(DICTIONARY_OUTPUT, `${content}`)
}
